import React, { useState, useEffect, useCallback, useMemo } from 'react';
import axios from 'axios';
import { 
  Search, Plus, Edit, Trash2, RefreshCw, AlertTriangle, Package, 
  DollarSign, BarChart3, Eye, X, Grid, List, Download, Upload,
  Save, FileSpreadsheet, CheckCircle, AlertCircle, Camera,
  TrendingUp, RotateCcw, Printer, ImageIcon, Calculator
} from 'lucide-react';
import CONFIG from '../config/config';

// ⚡ OPTIMIZACIÓN: Lazy load de JsBarcode solo cuando se necesite
const loadJsBarcode = () => import('jsbarcode');

const ProductosPage = () => {
  // Estados principales
  const [productos, setProductos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Estados de vista
  const [searchTerm, setSearchTerm] = useState('');
  const [tipoVista, setTipoVista] = useState('list');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 12;
  
  // Estados de modales
  const [modalDetalle, setModalDetalle] = useState(false);
  const [modalForm, setModalForm] = useState(false);
  const [modalImport, setModalImport] = useState(false);
  const [productoSeleccionado, setProductoSeleccionado] = useState(null);
  const [modoEdicion, setModoEdicion] = useState(false);
  
  // Estados para análisis de ventas
  const [datosVentas, setDatosVentas] = useState({
    ventasUltimos7Dias: 0,
    ventasUltimos30Dias: 0,
    promedioMensual: 0,
    ultimoMovimiento: null,
    rotacionEstimada: 0,
    cargando: false
  });
  
  // Estados del formulario
  const [formData, setFormData] = useState({
    nombre: '',
    categoria: '',
    precio_venta: '',
    precio_costo: '',
    stock: '',
    codigo: '',
    descripcion: '',
    stock_minimo: '',
    aplica_descuento_forma_pago: true
  });
  
  // Estados de importación
  const [archivoImport, setArchivoImport] = useState(null);
  const [procesandoImport, setProcesandoImport] = useState(false);
  const [resultadoImport, setResultadoImport] = useState(null);

  // Estados para el cálculo de precios
  const [porcentajePersonalizado, setPorcentajePersonalizado] = useState('');
  const [precioCalculado, setPrecioCalculado] = useState('');

  // Estados para el modal mejorado
  const [tabActiva, setTabActiva] = useState('informacion');
  const [imagenProducto, setImagenProducto] = useState(null);
  const [imagenPreview, setImagenPreview] = useState('');
  const [dragOver, setDragOver] = useState(false);

  // Cargar productos
  useEffect(() => {
    cargarProductos();
  }, []);

  // Reiniciar paginación cuando cambie la búsqueda
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm]);
  
  // ⚡ OPTIMIZACIÓN: Cargar productos con useCallback
  const cargarProductos = useCallback(async () => {
    setLoading(true);
    try {
      // ⚡ CARGAR TODOS LOS PRODUCTOS para página de administración
      const response = await axios.get(`${CONFIG.API_URL}/api/productos.php?admin=true`);
      
      if (response.data && Array.isArray(response.data)) {
        const productosLimpios = [];
        
        response.data.forEach((item, index) => {
          if (item && typeof item === 'object') {
            const producto = {
              id: String(item.id || `temp_${index}`),
              nombre: String(item.nombre || 'Sin nombre'),
              categoria: String(item.categoria || 'Sin categoría'),
              precio_venta: parseFloat(item.precio_venta || 0),
              precio_costo: parseFloat(item.precio_costo || 0),
              stock: parseInt(item.stock_actual || item.stock || 0),
              codigo: String(item.barcode || item.codigo || ''),
              descripcion: String(item.descripcion || ''),
              aplica_descuento_forma_pago: Boolean(item.aplica_descuento_forma_pago !== undefined ? item.aplica_descuento_forma_pago : true)
            };
            
            productosLimpios.push(producto);
          }
        });
        
        setProductos(productosLimpios);
      } else {
        setProductos([]);
      }
    } catch (error) {
      console.error('Error al cargar productos:', error);
      setError('Error al cargar productos');
      setProductos([]);
    }
    setLoading(false);
  }, []);
    
  // ⚡ OPTIMIZACIÓN: Filtrar productos con memoización
  const productosFiltrados = useMemo(() => {
    if (!searchTerm) return productos;
    const searchLower = searchTerm.toLowerCase();
    return productos.filter(producto => 
      producto.nombre.toLowerCase().includes(searchLower) ||
      producto.categoria.toLowerCase().includes(searchLower) ||
      producto.codigo.toLowerCase().includes(searchLower)
    );
  }, [productos, searchTerm]);

  // ⚡ OPTIMIZACIÓN: Paginación memoizada
  const paginacionData = useMemo(() => {
    const totalPages = Math.ceil(productosFiltrados.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const productosPaginados = productosFiltrados.slice(startIndex, startIndex + itemsPerPage);
    
    return { totalPages, startIndex, productosPaginados };
  }, [productosFiltrados, currentPage, itemsPerPage]);

  // ⚡ OPTIMIZACIÓN: Estadísticas memoizadas
  const estadisticas = useMemo(() => ({
    totalProductos: productos.length,
    valorTotal: productos.reduce((sum, p) => sum + ((p.precio_costo || 0) * p.stock), 0),
    sinStock: productos.filter(p => p.stock === 0).length,
    bajoStock: productos.filter(p => p.stock > 0 && p.stock <= 5).length
  }), [productos]);

  // Funciones de modales
  const abrirDetalle = (producto) => {
    setProductoSeleccionado(producto);
    setModalDetalle(true);
    // Cargar análisis de ventas real
    cargarAnalisisVentas(producto.id, producto.nombre);
  };

  const abrirModalNuevo = () => {
    setFormData({
      nombre: '',
      categoria: '',
      precio_venta: '',
      precio_costo: '',
      stock: '',
      codigo: '',
      descripcion: '',
      stock_minimo: '',
      aplica_descuento_forma_pago: true
    });
    setPorcentajePersonalizado('');
    setPrecioCalculado('');
    setTabActiva('informacion');
    setImagenProducto(null);
    setImagenPreview('');
    setModoEdicion(false);
    setModalForm(true);
  };

  const abrirModalEditar = (producto) => {
    setFormData({
      nombre: producto.nombre,
      categoria: producto.categoria,
      precio_venta: String(producto.precio_venta),
      precio_costo: String(producto.precio_costo),
      stock: String(producto.stock),
      codigo: producto.codigo,
      descripcion: producto.descripcion,
      stock_minimo: String(producto.stock_minimo || ''),
      aplica_descuento_forma_pago: Boolean(producto.aplica_descuento_forma_pago !== undefined ? producto.aplica_descuento_forma_pago : true)
    });
    setPorcentajePersonalizado('');
    setPrecioCalculado('');
    setTabActiva('informacion');
    setImagenProducto(null);
    
    // Cargar imagen existente si existe (con timestamp para evitar caché)
    const timestamp = new Date().getTime();
    const codigoImagen = producto.codigo || producto.barcode || 'no-image';
    const imagenExistente = `${CONFIG.API_URL}/img/productos/${codigoImagen}.jpg?t=${timestamp}`;
    setImagenPreview(imagenExistente);
    
    setProductoSeleccionado(producto);
    setModoEdicion(true);
    setModalForm(true);
  };

  const cerrarModales = () => {
    setModalDetalle(false);
    setModalForm(false);
    setModalImport(false);
    setProductoSeleccionado(null);
    setModoEdicion(false);
    setArchivoImport(null);
    setResultadoImport(null);
    setPorcentajePersonalizado('');
    setPrecioCalculado('');
    setTabActiva('informacion');
    setImagenProducto(null);
    setImagenPreview('');
    setDragOver(false);
  };

  // Función optimizada para manejar cambios en el formulario
  const handleInputChange = useCallback((e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);

  // Función para calcular precio con porcentaje
  const calcularPrecioConPorcentaje = (porcentaje) => {
    const costo = parseFloat(formData.precio_costo);
    if (isNaN(costo) || costo <= 0) {
      alert('Primero ingrese un precio de costo válido');
      return;
    }
    
    const aumento = (costo * porcentaje) / 100;
    const precioFinal = costo + aumento;
    
    setFormData(prev => ({
      ...prev,
      precio_venta: precioFinal.toFixed(2)
    }));
    
    setPrecioCalculado(`$${costo.toFixed(2)} + ${porcentaje}% = $${precioFinal.toFixed(2)}`);
  };

  // Función para aplicar porcentaje personalizado
  const aplicarPorcentajePersonalizado = () => {
    const porcentaje = parseFloat(porcentajePersonalizado);
    if (isNaN(porcentaje) || porcentaje < 0) {
      alert('Ingrese un porcentaje válido');
      return;
    }
    
    calcularPrecioConPorcentaje(porcentaje);
  };

  // Limpiar cálculo cuando cambie el precio de costo
  useEffect(() => {
    setPrecioCalculado('');
  }, [formData.precio_costo]);

  // Funciones para manejo de imágenes
  const handleImageUpload = (file) => {
    if (file && file.type.startsWith('image/')) {
      setImagenProducto(file);
      
      // Crear preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagenPreview(e.target.result);
      };
      reader.readAsDataURL(file);
    } else {
      alert('Por favor selecciona un archivo de imagen válido (JPG, PNG, etc.)');
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleImageUpload(files[0]);
    }
  };

  const handleFileInputChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      handleImageUpload(file);
    }
  };

  const removerImagen = () => {
    setImagenProducto(null);
    setImagenPreview('');
  };

  // Función específica para subir imagen desde modal de detalles
  const handleImageUploadDetalle = async (file) => {
    if (!file || !file.type.startsWith('image/')) {
      alert('Por favor selecciona un archivo de imagen válido (JPG, PNG, etc.)');
      return;
    }

    if (!productoSeleccionado?.codigo) {
      alert('No se puede subir la imagen: el producto no tiene código');
      return;
    }

    try {
      // Mostrar loading
      const loadingToast = document.createElement('div');
      loadingToast.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      loadingToast.textContent = 'Subiendo imagen...';
      document.body.appendChild(loadingToast);

      // Subir imagen directamente
      await subirImagenProducto(file, productoSeleccionado.codigo);
      
      // Eliminar loading toast
      document.body.removeChild(loadingToast);
      
      // Mostrar éxito
      const successToast = document.createElement('div');
      successToast.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      successToast.textContent = '¡Imagen actualizada exitosamente!';
      document.body.appendChild(successToast);
      
      // Forzar recarga de la imagen
      setTimeout(() => {
        // Recargar todas las imágenes en la página
        const imagenes = document.querySelectorAll('img');
        imagenes.forEach(img => {
          if (img.src.includes(productoSeleccionado.codigo)) {
            const url = new URL(img.src);
            url.searchParams.set('t', Date.now());
            img.src = url.toString();
          }
        });
        
        // Eliminar toast de éxito
        if (document.body.contains(successToast)) {
          document.body.removeChild(successToast);
        }
      }, 2000);
      
    } catch (error) {
      console.error('Error al subir imagen:', error);
      alert('Error al subir la imagen. Intenta nuevamente.');
    }
  };

  // Función específica para subir imagen desde vista grid
  const handleImageUploadGrid = async (file, producto) => {
    if (!file || !file.type.startsWith('image/')) {
      alert('Por favor selecciona un archivo de imagen válido (JPG, PNG, etc.)');
      return;
    }

    if (!producto?.codigo) {
      alert('No se puede subir la imagen: el producto no tiene código');
      return;
    }

    try {
      // Mostrar loading
      const loadingToast = document.createElement('div');
      loadingToast.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      loadingToast.textContent = `Subiendo imagen para ${producto.nombre}...`;
      document.body.appendChild(loadingToast);

      // Subir imagen directamente
      await subirImagenProducto(file, producto.codigo);
      
      // Eliminar loading toast
      document.body.removeChild(loadingToast);
      
      // Mostrar éxito
      const successToast = document.createElement('div');
      successToast.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      successToast.textContent = `✅ Imagen de ${producto.nombre} actualizada!`;
      document.body.appendChild(successToast);
      
      // Forzar recarga de la imagen
      setTimeout(() => {
        // Recargar todas las imágenes en la página
        const imagenes = document.querySelectorAll('img');
        imagenes.forEach(img => {
          if (img.src.includes(producto.codigo)) {
            const url = new URL(img.src);
            url.searchParams.set('t', Date.now());
            img.src = url.toString();
          }
        });
        
        // Eliminar toast de éxito
        if (document.body.contains(successToast)) {
          document.body.removeChild(successToast);
        }
      }, 2000);
      
    } catch (error) {
      console.error('Error al subir imagen:', error);
      alert(`Error al subir la imagen de ${producto.nombre}. Intenta nuevamente.`);
    }
  };

  // Guardar producto (crear o editar)
  const guardarProducto = async () => {
    try {
      // Validaciones básicas
      if (!formData.nombre.trim()) {
        alert('El nombre del producto es obligatorio');
        return;
      }
      
      if (!formData.precio_venta || parseFloat(formData.precio_venta) <= 0) {
        alert('El precio de venta debe ser mayor a 0');
        return;
      }

      const datosProducto = {
        nombre: formData.nombre.trim(),
        categoria: formData.categoria.trim() || 'Sin categoría',
        precio_venta: parseFloat(formData.precio_venta),
        precio_costo: parseFloat(formData.precio_costo) || 0,
        stock: parseInt(formData.stock) || 0,
        codigo: formData.codigo.trim(),
        descripcion: formData.descripcion.trim(),
        stock_minimo: parseInt(formData.stock_minimo) || 10,
        aplica_descuento_forma_pago: formData.aplica_descuento_forma_pago
      };

      if (modoEdicion) {
        // Editar producto existente
        await axios.put(`${CONFIG.API_URL}/api/productos.php`, {
          id: productoSeleccionado.id,
          ...datosProducto
        });
      } else {
        // Crear nuevo producto
        await axios.post(`${CONFIG.API_URL}/api/productos.php`, datosProducto);
      }

      // Subir imagen si se seleccionó una
      if (imagenProducto && datosProducto.codigo) {
        await subirImagenProducto(imagenProducto, datosProducto.codigo);
      }

      // Recargar productos para mostrar cambios
      await cargarProductos();
      
      // Mostrar mensaje de éxito
      const mensaje = modoEdicion ? 'Producto actualizado exitosamente' : 'Producto creado exitosamente';
      
      // Mostrar toast de éxito en lugar de alert
      const successToast = document.createElement('div');
      successToast.className = 'fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-2';
      successToast.innerHTML = `<span>✅</span><span>${mensaje}</span>`;
      document.body.appendChild(successToast);
      
      // Solo cerrar modal si es un producto nuevo
      if (!modoEdicion) {
        cerrarModales();
      } else {
        // Si es edición, actualizar el producto seleccionado con los nuevos datos
        const productosActualizados = await axios.get(`${CONFIG.API_URL}/api/productos.php?admin=true`);
        const productoActualizado = productosActualizados.data.find(p => p.id === productoSeleccionado.id);
        if (productoActualizado) {
          setProductoSeleccionado(productoActualizado);
        }
      }
      
      // Forzar actualización de imágenes en toda la página
      setTimeout(() => {
        window.dispatchEvent(new Event('productImageUpdated'));
        // Eliminar toast después de 3 segundos
        if (document.body.contains(successToast)) {
          document.body.removeChild(successToast);
        }
      }, 3000);
    } catch (error) {
      console.error('Error al guardar producto:', error);
      alert('Error al guardar el producto');
    }
  };

  // Función para subir imagen del producto
  const subirImagenProducto = async (archivo, codigo) => {
    try {
      const formData = new FormData();
      formData.append('imagen', archivo);
      formData.append('codigo', codigo);

      console.log('Subiendo imagen para producto:', codigo);
      
      const response = await axios.post(`${CONFIG.API_URL}/api/subir_imagen_producto.php`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        console.log('✅ Imagen subida exitosamente:', response.data.archivo);
        
        // Forzar recarga de la imagen en toda la aplicación agregando timestamp
        const timestamp = new Date().getTime();
        const nuevaImagenUrl = `${CONFIG.API_URL}/img/productos/${codigo}.jpg?t=${timestamp}`;
        
        // Actualizar el preview local inmediatamente
        setImagenPreview(nuevaImagenUrl);
        
        return response.data;
      } else {
        throw new Error(response.data.error || 'Error desconocido al subir imagen');
      }
    } catch (error) {
      console.error('❌ Error al subir imagen:', error);
      alert('Advertencia: El producto se guardó pero hubo un problema al subir la imagen: ' + error.message);
    }
  };

  // Eliminar producto
  const eliminarProducto = async (producto) => {
    if (window.confirm(`¿Estás seguro de que deseas eliminar "${producto.nombre}"?`)) {
      try {
        await axios.delete(`${CONFIG.API_URL}/api/productos.php?id=${producto.id}`);
        await cargarProductos();
        alert('Producto eliminado exitosamente');
      } catch (error) {
        console.error('Error al eliminar producto:', error);
        alert('Error al eliminar el producto');
      }
    }
  };

  // Exportar a Excel
  const exportarExcel = () => {
    try {
      // Crear datos para Excel con encabezados en español
      const datosExcel = [
        ['Código', 'Nombre', 'Categoría', 'Precio Costo', 'Precio Venta', 'Stock', 'Descripción']
      ];
      
      productos.forEach(producto => {
        datosExcel.push([
          producto.codigo,
          producto.nombre,
          producto.categoria,
          producto.precio_costo,
          producto.precio_venta,
          producto.stock,
          producto.descripcion
        ]);
      });

      // Convertir a CSV (compatible con Excel)
      const csvContent = datosExcel.map(row => 
        row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
      ).join('\n');

      // Crear y descargar archivo
      const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `productos_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      } catch (error) {
      console.error('Error al exportar:', error);
      alert('Error al exportar datos');
    }
  };

  // Descargar plantilla Excel
  const descargarPlantilla = () => {
    const plantilla = [
      ['Código', 'Nombre', 'Categoría', 'Precio Costo', 'Precio Venta', 'Stock', 'Descripción'],
      ['7790123456789', 'Coca Cola 500ml', 'Bebidas', '50.00', '75.00', '100', 'Bebida gaseosa sabor cola'],
      ['7790987654321', 'Alfajor Havanna', 'Golosinas', '25.00', '', '50', 'Alfajor de dulce de leche - Sin precio'],
      ['7791234567890', 'Agua Mineral 500ml', 'Bebidas', '20.00', '30.00', '200', 'Agua mineral sin gas'],
      ['PRD001', 'Producto Nuevo', 'General', '', '', '0', 'Producto sin precios para completar después'],
      ['', '', '', '', '', '', '']
    ];

    const csvContent = plantilla.map(row => 
      row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
    ).join('\n');

    const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'plantilla_productos.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Manejar selección de archivo
  const handleFileSelect = (e) => {
    const archivo = e.target.files[0];
    if (archivo) {
      if (archivo.type === 'text/csv' || archivo.name.endsWith('.csv')) {
        setArchivoImport(archivo);
      } else {
        alert('Por favor selecciona un archivo CSV válido');
        e.target.value = '';
      }
    }
  };

  // Función para parsear CSV correctamente (maneja comillas y separadores)
  const parseCSVLine = (line) => {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      const nextChar = line[i + 1];
      
      if (char === '"') {
        if (inQuotes && nextChar === '"') {
          // Comilla escapada ""
          current += '"';
          i++; // Saltar la siguiente comilla
        } else {
          // Cambiar estado de comillas
          inQuotes = !inQuotes;
        }
      } else if ((char === ',' || char === ';') && !inQuotes) {
        // Separador encontrado fuera de comillas
        result.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    // Agregar el último campo
    result.push(current.trim());
    return result;
  };

  // Procesar importación
  const procesarImportacion = async () => {
    if (!archivoImport) {
      alert('Por favor selecciona un archivo');
      return;
    }
        
    setProcesandoImport(true);
    
    const productos = [];
    const errores = [];
    
    try {
      // Leer archivo con encoding correcto
      const arrayBuffer = await archivoImport.arrayBuffer();
      const decoder = new TextDecoder('utf-8');
      let text = decoder.decode(arrayBuffer);
      
      // Si no funciona UTF-8, probar Latin-1 (común en Excel español)
      if (text.includes('�')) {
        const decoder2 = new TextDecoder('latin-1');
        text = decoder2.decode(arrayBuffer);
      }
      
      // Remover BOM si existe
      text = text.replace(/^\uFEFF/, '');
      
      const lines = text.split(/\r?\n/);
      if (lines.length < 2) {
        throw new Error('El archivo debe contener al menos una fila de datos además del encabezado');
      }
      
      // Parsear encabezados
      const headers = parseCSVLine(lines[0]).map(h => h.toLowerCase().trim());
      
      console.log('Encabezados detectados:', headers);
      
      // Mapear columnas flexiblemente
      const columnMap = {};
      
      // Buscar columnas esperadas (flexible)
      headers.forEach((header, index) => {
        if (header.includes('código') || header.includes('codigo') || header.includes('sku')) {
          columnMap.codigo = index;
        } else if (header.includes('nombre') || header.includes('producto')) {
          columnMap.nombre = index;
        } else if (header.includes('categoría') || header.includes('categoria') || header.includes('category')) {
          columnMap.categoria = index;
        } else if (header.includes('precio') && (header.includes('costo') || header.includes('compra'))) {
          columnMap.precio_costo = index;
        } else if (header.includes('precio') && (header.includes('venta') || header.includes('venda'))) {
          columnMap.precio_venta = index;
        } else if (header.includes('stock') || header.includes('inventario') || header.includes('cantidad')) {
          columnMap.stock = index;
        } else if (header.includes('descripción') || header.includes('descripcion') || header.includes('description')) {
          columnMap.descripcion = index;
        }
      });

             // Validar que tengamos al menos nombre (precio de venta es opcional)
       if (columnMap.nombre === undefined) {
         throw new Error('No se encontró la columna "Nombre". Encabezados detectados: ' + headers.join(', '));
       }

      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;

        try {
          const values = parseCSVLine(line);
          
                     // Extraer datos usando el mapeo de columnas
           const nombre = values[columnMap.nombre]?.trim();
           
           if (!nombre) {
             errores.push(`Línea ${i + 1}: Nombre de producto vacío`);
             continue;
           }
           
           // Precio de venta es opcional - usar 0 por defecto si no está presente
           let precio_venta = 0;
           if (columnMap.precio_venta !== undefined && values[columnMap.precio_venta]) {
             const precioTexto = values[columnMap.precio_venta]?.replace(/[^0-9.,]/g, '').replace(',', '.');
             precio_venta = parseFloat(precioTexto) || 0;
           }
          
          const producto = {
            codigo: values[columnMap.codigo]?.trim() || '',
            nombre: nombre,
            categoria: values[columnMap.categoria]?.trim() || 'Sin categoría',
            precio_costo: parseFloat(values[columnMap.precio_costo]?.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0,
            precio_venta: precio_venta,
            stock: parseInt(values[columnMap.stock]?.replace(/[^0-9]/g, '')) || 0,
            descripcion: values[columnMap.descripcion]?.trim() || ''
          };

          productos.push(producto);
          
        } catch (error) {
          errores.push(`Línea ${i + 1}: Error de formato - ${error.message}`);
        }
      }

      if (productos.length === 0) {
        throw new Error('No se encontraron productos válidos para importar. Errores: ' + errores.join('; '));
      }

      console.log(`Productos a importar: ${productos.length}`, productos);

      // Importar productos
      let exitosos = 0;
      let omitidos = 0;
      
      for (const producto of productos) {
        try {
          await axios.post(`${CONFIG.API_URL}/api/productos.php`, producto);
          exitosos++;
        } catch (error) {
          // Debug detallado del error
          let mensajeError = `${producto.nombre}`;
          let esDuplicado = false;
          
          if (error.response && error.response.data) {
            if (error.response.data.message) {
              if (error.response.data.message.includes('ya existe')) {
                esDuplicado = true;
                omitidos++;
                if (error.response.data.message.includes('código')) {
                  mensajeError += ` → Código '${producto.codigo}' duplicado (omitido)`;
                } else if (error.response.data.message.includes('nombre')) {
                  mensajeError += ` → Nombre duplicado (omitido)`;
                } else {
                  mensajeError += ` → Ya existe (omitido)`;
                }
              } else {
                mensajeError += ` → Error: ${error.response.data.message}`;
              }
            }
          } else if (error.message) {
            mensajeError += ` → Error: ${error.message}`;
          }
          
          console.error('Error detallado:', {
            producto,
            error: error.response?.data || error.message,
            esDuplicado
          });
          
          errores.push(mensajeError);
        }
      }

      // Agregar mensajes informativos
      const mensajesInfo = [];
      
      if (productos.some(p => p.precio_venta === 0)) {
        mensajesInfo.push('ℹ️ Algunos productos se importaron sin precio - puedes completarlos después en el listado');
      }
      
      if (omitidos > 0) {
        mensajesInfo.push(`ℹ️ ${omitidos} productos duplicados fueron omitidos (ya existían en el sistema)`);
      }
      
      // Agregar mensajes informativos a los errores
      errores.push(...mensajesInfo);

      setResultadoImport({
        total: productos.length,
        exitosos,
        omitidos,
        erroresReales: errores.length - mensajesInfo.length,
        errores
      });

      await cargarProductos();
      } catch (error) {
      console.error('Error en importación:', error);
      
      // Mostrar error más detallado al usuario
      let mensajeError = 'Error al procesar el archivo:\n\n' + error.message;
      if (errores.length > 0) {
        mensajeError += '\n\nErrores específicos:\n' + errores.slice(0, 5).join('\n');
        if (errores.length > 5) {
          mensajeError += `\n... y ${errores.length - 5} errores más`;
        }
      }
      
      alert(mensajeError);
    }
    
    setProcesandoImport(false);
  };

  // Función para imprimir etiqueta de código de barras
  const imprimirEtiqueta = (producto) => {
    const ventanaImpresion = window.open('', '_blank', 'width=400,height=300');
    
    // HTML para etiqueta de impresora convencional (58mm típico)
    const htmlEtiqueta = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Etiqueta - ${producto.nombre}</title>
        <style>
          @page {
            size: 58mm 40mm;
            margin: 0;
          }
          
          @media print {
            body { margin: 0; }
            .no-print { display: none; }
          }
          
          body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 2mm;
            width: 54mm;
            height: 36mm;
            font-size: 8px;
            line-height: 1.2;
          }
          
          .etiqueta {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
          }
          
          .nombre {
            font-weight: bold;
            font-size: 9px;
            text-align: center;
            margin-bottom: 1mm;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }
          
          .codigo-barras {
            text-align: center;
            margin: 1mm 0;
          }
          
          .codigo-barras canvas {
            max-width: 100%;
            height: auto;
          }
          
          .info {
            display: flex;
            justify-content: space-between;
            font-size: 7px;
            margin-top: 1mm;
          }
          
          .precio {
            font-weight: bold;
            font-size: 10px;
          }
          
          .codigo-texto {
            font-family: monospace;
            font-size: 6px;
            text-align: center;
            margin-top: 0.5mm;
          }
          
          .boton-imprimir {
            position: fixed;
            top: 10px;
            right: 10px;
            background: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
          }
        </style>
        <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
      </head>
      <body>
        <button class="boton-imprimir no-print" onclick="window.print()">Imprimir</button>
        
        <div class="etiqueta">
          <div class="nombre">${producto.nombre}</div>
          
          <div class="codigo-barras">
            <canvas id="barcode"></canvas>
          </div>
          
          <div class="codigo-texto">${producto.codigo}</div>
          
          <div class="info">
            <span class="precio">$${producto.precio_venta.toFixed(2)}</span>
            <span>${producto.categoria}</span>
          </div>
        </div>

        <script>
          window.onload = function() {
            try {
              JsBarcode("#barcode", "${producto.codigo}", {
                format: "CODE128",
                width: 1.5,
                height: 20,
                displayValue: false,
                margin: 0
              });
            } catch(e) {
              console.error('Error generando código de barras:', e);
              document.getElementById('barcode').style.display = 'none';
            }
          };
        </script>
      </body>
      </html>
    `;
    
    ventanaImpresion.document.write(htmlEtiqueta);
    ventanaImpresion.document.close();
    
    // Auto-enfocar la ventana para facilitar la impresión
    ventanaImpresion.focus();
  };

  // Componente de imagen de producto con carga suave
  const ImagenProducto = ({ codigo, nombre, size = 'default' }) => {
    const [estado, setEstado] = useState('cargando'); // 'cargando', 'cargada', 'error'
    const [imagenUrl, setImagenUrl] = useState(null);

    // Precargar imagen cuando cambie el código
    useEffect(() => {
      if (!codigo) {
        setEstado('error');
        return;
      }

      setEstado('cargando');
      
      // Buscar imagen en diferentes formatos y con timestamp para evitar caché
      const timestamp = Date.now();
      const formatosImagen = ['jpg', 'jpeg', 'png', 'webp', 'gif'];
      let formatoEncontrado = false;

      const probarFormatos = async () => {
        for (const formato of formatosImagen) {
          try {
            const img = new Image();
            const imagenUrl = `${CONFIG.API_URL}/img/productos/${codigo}.${formato}?t=${timestamp}`;
            
            await new Promise((resolve, reject) => {
              img.onload = () => {
                if (!formatoEncontrado) {
                  formatoEncontrado = true;
                  setImagenUrl(imagenUrl);
                  setEstado('cargada');
                  resolve();
                }
              };
              img.onerror = reject;
              img.src = imagenUrl;
            });
            
            break; // Si encontramos una imagen, salir del loop
          } catch (error) {
            // Continuar con el siguiente formato
            continue;
          }
        }
        
        // Si no se encontró ninguna imagen
        if (!formatoEncontrado) {
          setEstado('error');
        }
      };

      probarFormatos();
      
      // Listener para actualizar imagen cuando se suba una nueva
      const handleImageUpdate = () => {
        // Esperar un poco para que la imagen se procese en el servidor
        setTimeout(() => {
          probarFormatos();
        }, 1000);
      };
      
      window.addEventListener('productImageUpdated', handleImageUpdate);
      
      return () => {
        window.removeEventListener('productImageUpdated', handleImageUpdate);
      };
    }, [codigo]);
    
    // Configuración de tamaños
    const sizeConfig = {
      small: {
        container: "w-12 h-12",
        icon: "w-5 h-5"
      },
      default: {
        container: "w-full h-32",
        icon: "w-8 h-8"
      }
    };
    
    const config = sizeConfig[size];
    
    return (
      <div className={`relative ${config.container} rounded-lg overflow-hidden border border-gray-200 bg-gray-50`}>
        {/* Skeleton de carga */}
        <div 
          className={`absolute inset-0 bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center transition-opacity duration-300 ${
            estado === 'cargando' ? 'opacity-100' : 'opacity-0'
          }`}
        >
          <div className="animate-pulse">
            <Package className={`${config.icon} text-gray-400`} />
          </div>
        </div>

        {/* Imagen cargada */}
        {estado === 'cargada' && imagenUrl && (
          <img
            src={imagenUrl}
            alt={nombre}
            className="w-full h-full object-contain transition-opacity duration-300 opacity-100"
          />
        )}

        {/* Estado de error - ícono por defecto */}
        {estado === 'error' && (
          <div className="absolute inset-0 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center transition-opacity duration-300 opacity-100">
            <Package className={`${config.icon} text-blue-400`} />
          </div>
        )}
      </div>
    );
  };

  // Componente de estado de stock
  const EstadoStock = ({ stock }) => {
    if (stock === 0) {
      return <span className="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">Sin Stock</span>;
    } else if (stock <= 5) {
      return <span className="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">Bajo Stock</span>;
    } else {
      return <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">Normal</span>;
    }
  };

  // Función para cargar análisis de ventas real
  const cargarAnalisisVentas = async (productoId, productoNombre) => {
    setDatosVentas(prev => ({ ...prev, cargando: true }));
    
    try {
      // Consultar ventas de los últimos 30 días
      const fechaHoy = new Date();
      const fecha30DiasAtras = new Date(fechaHoy.getTime() - (30 * 24 * 60 * 60 * 1000));
      const fecha7DiasAtras = new Date(fechaHoy.getTime() - (7 * 24 * 60 * 60 * 1000));
      
      // Obtener todas las ventas (la API actual no parece tener filtro por producto específico)
      const response = await axios.get(`${CONFIG.API_URL}/api/ventas_reales.php?limite=1000`);
      
      if (response.data && response.data.success) {
        const todasLasVentas = response.data.items || [];
        
        // Filtrar ventas del producto específico por nombre (ya que la API no tiene filtro por ID)
        const ventasDelProducto = todasLasVentas.filter(venta => 
          venta.cliente_nombre && venta.cliente_nombre.includes(productoNombre)
        );
        
        // Calcular estadísticas
        const ventasUltimos7Dias = ventasDelProducto.filter(venta => {
          const fechaVenta = new Date(venta.fecha || Date.now());
          return fechaVenta >= fecha7DiasAtras;
        }).length;
        
        const ventasUltimos30Dias = ventasDelProducto.filter(venta => {
          const fechaVenta = new Date(venta.fecha || Date.now());
          return fechaVenta >= fecha30DiasAtras;
        }).length;
        
        // Calcular promedio mensual (últimos 3 meses)
        const promedioMensual = Math.round(ventasUltimos30Dias / 1); // Aproximación basada en 30 días
        
        // Encontrar último movimiento
        const ultimoMovimiento = ventasDelProducto.length > 0 
          ? ventasDelProducto.sort((a, b) => new Date(b.fecha || 0) - new Date(a.fecha || 0))[0]
          : null;
        
        // Calcular rotación estimada
        const rotacionEstimada = ventasUltimos30Dias > 0 ? Math.round((ventasUltimos30Dias / 30) * 30) : 0;
        
        setDatosVentas({
          ventasUltimos7Dias,
          ventasUltimos30Dias,
          promedioMensual,
          ultimoMovimiento,
          rotacionEstimada,
          cargando: false
        });
        
      } else {
        // Si no hay datos, resetear a valores por defecto
        setDatosVentas({
          ventasUltimos7Dias: 0,
          ventasUltimos30Dias: 0,
          promedioMensual: 0,
          ultimoMovimiento: null,
          rotacionEstimada: 0,
          cargando: false
        });
      }
      
    } catch (error) {
      console.error('Error al cargar análisis de ventas:', error);
      setDatosVentas({
        ventasUltimos7Dias: 0,
        ventasUltimos30Dias: 0,
        promedioMensual: 0,
        ultimoMovimiento: null,
        rotacionEstimada: 0,
        cargando: false
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="flex items-center space-x-3">
          <RefreshCw className="w-6 h-6 animate-spin text-blue-600" />
          <span className="text-lg font-medium text-gray-700">Cargando productos...</span>
              </div>
              </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error al cargar datos</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={cargarProductos}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Reintentar
          </button>
              </div>
            </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
        <div className="flex items-center space-x-3 mb-4 lg:mb-0">
          <div className="p-3 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl">
            <Package className="w-8 h-8 text-white" />
              </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Gestión de Productos</h1>
            <p className="text-gray-600">Administra tu catálogo de productos</p>
          </div>
            </div>
            
        <div className="flex items-center space-x-3">
              <button
            onClick={descargarPlantilla}
            className="flex items-center space-x-2 px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
              >
            <FileSpreadsheet className="w-4 h-4" />
            <span>Plantilla</span>
              </button>
          
              <button
            onClick={() => setModalImport(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors"
          >
            <Upload className="w-4 h-4" />
            <span>Importar</span>
              </button>
          
          <button
            onClick={exportarExcel}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <Download className="w-4 h-4" />
            <span>Exportar</span>
          </button>
          
          <button
            onClick={cargarProductos}
            className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
          >
            <RefreshCw className="w-4 h-4" />
            <span>Actualizar</span>
          </button>
          
            <button 
            onClick={abrirModalNuevo}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
            <Plus className="w-4 h-4" />
            <span>Nuevo Producto</span>
            </button>
        </div>
          </div>
          
      {/* Estadísticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between">
                <div>
              <p className="text-sm font-medium text-gray-600">Total Productos</p>
              <p className="text-2xl font-bold text-gray-900">{totalProductos}</p>
            </div>
            <div className="p-3 bg-blue-100 rounded-lg">
              <Package className="w-6 h-6 text-blue-600" />
            </div>
          </div>
                </div>
                
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between">
                  <div>
              <p className="text-sm font-medium text-gray-600">Inversión en Stock</p>
              <p className="text-2xl font-bold text-gray-900">${estadisticas.valorTotal.toLocaleString()}</p>
                  </div>
            <div className="p-3 bg-green-100 rounded-lg">
              <DollarSign className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between">
                  <div>
              <p className="text-sm font-medium text-gray-600">Bajo Stock</p>
              <p className="text-2xl font-bold text-yellow-600">{estadisticas.bajoStock}</p>
                    </div>
            <div className="p-3 bg-yellow-100 rounded-lg">
              <AlertCircle className="w-6 h-6 text-yellow-600" />
                  </div>
          </div>
        </div>
                
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between">
                  <div>
              <p className="text-sm font-medium text-gray-600">Sin Stock</p>
              <p className="text-2xl font-bold text-red-600">{estadisticas.sinStock}</p>
                  </div>
            <div className="p-3 bg-red-100 rounded-lg">
              <AlertTriangle className="w-6 h-6 text-red-600" />
              </div>
          </div>
        </div>
          </div>
          
      {/* Controles */}
      <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          {/* Búsqueda */}
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar productos..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          {/* Controles de vista */}
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setTipoVista('grid')}
              className={`p-2 rounded-lg transition-colors ${
                tipoVista === 'grid' 
                  ? 'bg-blue-100 text-blue-600' 
                  : 'text-gray-400 hover:text-gray-600'
              }`}
            >
              <Grid className="w-4 h-4" />
            </button>
            <button
              onClick={() => setTipoVista('list')}
              className={`p-2 rounded-lg transition-colors ${
                tipoVista === 'list' 
                  ? 'bg-blue-100 text-blue-600' 
                  : 'text-gray-400 hover:text-gray-600'
              }`}
            >
              <List className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Resultados */}
        <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
          <span>Mostrando {productosPaginados.length} de {productosFiltrados.length} productos</span>
          {totalPages > 1 && (
            <span>Página {currentPage} de {totalPages}</span>
          )}
        </div>
      </div>

      {/* Lista de productos */}
      {tipoVista === 'grid' ? (
        // Vista Grid
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-6">
          {paginacionData.productosPaginados.map((producto) => (
            <div 
              key={producto.id} 
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow"
            >
              <div className="p-4">
                {/* Imagen con botón de cambio */}
                <div className="relative group">
                  <ImagenProducto codigo={producto.codigo} nombre={producto.nombre} />
                  
                  {/* Botón flotante para cambiar imagen */}
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setProductoSeleccionado(producto);
                      document.getElementById(`imagen-upload-grid-${producto.id}`).click();
                    }}
                    className="absolute top-2 right-2 p-2 bg-white bg-opacity-90 hover:bg-opacity-100 text-blue-600 rounded-lg shadow-md opacity-0 group-hover:opacity-100 transition-all duration-200"
                    title="Cambiar imagen"
                  >
                    <Camera className="w-4 h-4" />
                  </button>
                  
                  {/* Input oculto para cada producto */}
                  <input
                    id={`imagen-upload-grid-${producto.id}`}
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files[0];
                      if (file) {
                        handleImageUploadGrid(file, producto);
                      }
                    }}
                    className="hidden"
                  />
                </div>
                
                <div className="mt-4">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-medium text-gray-900 text-sm leading-tight">{producto.nombre}</h3>
                    <EstadoStock stock={producto.stock} />
                  </div>
                  
                  <p className="text-xs text-gray-500 mb-3">{producto.categoria}</p>
                  
                  <div className="space-y-1 text-sm mb-4">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Precio:</span>
                      <span className="font-medium">${producto.precio_venta.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Stock:</span>
                      <span className="font-medium">{producto.stock}</span>
                    </div>
                  </div>

                  <div className="flex space-x-2">
            <button
                      onClick={() => abrirDetalle(producto)}
                      className="flex-1 flex items-center justify-center space-x-1 px-2 py-2 text-blue-600 border border-blue-200 rounded-lg hover:bg-blue-50 transition-colors text-sm"
            >
                      <Eye className="w-3 h-3" />
                      <span>Ver</span>
            </button>
        <button
                      onClick={() => abrirModalEditar(producto)}
                      className="flex-1 flex items-center justify-center space-x-1 px-2 py-2 text-green-600 border border-green-200 rounded-lg hover:bg-green-50 transition-colors text-sm"
                    >
                      <Edit className="w-3 h-3" />
                      <span>Editar</span>
        </button>
        <button
                      onClick={() => eliminarProducto(producto)}
                      className="flex items-center justify-center px-2 py-2 text-red-600 border border-red-200 rounded-lg hover:bg-red-50 transition-colors text-sm"
                    >
                      <Trash2 className="w-3 h-3" />
        </button>
      </div>
        </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        // Vista Lista Simple
        <div className="space-y-3 mb-6">
          {paginacionData.productosPaginados.map((producto) => {
            // Calcular porcentaje de ganancia
            const porcentajeGanancia = producto.precio_costo > 0 
              ? (((producto.precio_venta - producto.precio_costo) / producto.precio_costo) * 100).toFixed(1)
              : 0;
            
            return (
              <div 
                key={producto.id} 
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow"
              >
                <div className="flex items-center justify-between">
                  {/* Imagen y datos principales */}
                  <div className="flex items-center space-x-4 flex-1">
                    <div className="flex-shrink-0">
                      <ImagenProducto codigo={producto.codigo} nombre={producto.nombre} size="small" />
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-sm font-medium text-gray-900 truncate">{producto.nombre}</h3>
                        <EstadoStock stock={producto.stock} />
                      </div>
                      
                      <div className="flex items-center flex-wrap gap-x-6 gap-y-1 text-sm text-gray-600">
                        <span>
                          <span className="font-medium text-gray-700">Categoría:</span>
                          <span className="ml-1">{producto.categoria}</span>
                        </span>
                        
                        <span>
                          <span className="font-medium text-gray-700">P. Costo:</span>
                          <span className="text-blue-600 font-semibold ml-1">${producto.precio_costo?.toFixed(2) || '0.00'}</span>
                        </span>
                        
                        <span>
                          <span className="font-medium text-gray-700">P. Venta:</span>
                          <span className="text-green-600 font-semibold ml-1">${producto.precio_venta.toFixed(2)}</span>
                        </span>
                        
                        <span>
                          <span className="font-medium text-gray-700">Diferencia:</span>
                          <span className={`font-semibold ml-1 ${porcentajeGanancia > 0 ? 'text-emerald-600' : 'text-gray-500'}`}>
                            {porcentajeGanancia}%
                          </span>
                        </span>
                        
                        <span>
                          <span className="font-medium text-gray-700">Stock:</span>
                          <span className={`ml-1 font-semibold ${producto.stock <= 5 ? 'text-red-600' : 'text-gray-900'}`}>
                            {producto.stock}
                          </span>
                        </span>
                        
                        {producto.codigo && (
                          <span>
                            <span className="font-medium text-gray-700">Código:</span>
                            <span className="font-mono text-xs bg-gray-100 px-2 py-1 rounded ml-1">{producto.codigo}</span>
                          </span>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Acciones */}
                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={() => abrirDetalle(producto)}
                      className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      title="Ver detalles"
                    >
                      <Eye className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => abrirModalEditar(producto)}
                      className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                      title="Editar producto"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => eliminarProducto(producto)}
                      className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                      title="Eliminar producto"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Paginación */}
      {paginacionData.totalPages > 1 && (
        <div className="flex items-center justify-center space-x-2">
          <button
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Anterior
          </button>
          
          <span className="px-3 py-2 text-sm text-gray-700">
            {currentPage} de {paginacionData.totalPages}
          </span>
          
          <button
            onClick={() => setCurrentPage(Math.min(paginacionData.totalPages, currentPage + 1))}
            disabled={currentPage === paginacionData.totalPages}
            className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Siguiente
          </button>
        </div>
      )}

      {/* Modal de Detalle Avanzado */}
      {modalDetalle && productoSeleccionado && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[95vh] overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <Package className="w-6 h-6 text-blue-600" />
                <h2 className="text-xl font-semibold text-gray-900">Análisis Detallado del Producto</h2>
              </div>
              <button
                onClick={cerrarModales}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                
                {/* Columna izquierda: Imagen y código de barras */}
                <div className="space-y-6">
                  {/* Imagen del producto */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">Imagen del Producto</h3>
                      <button
                        onClick={() => document.getElementById('imagen-upload-detalle').click()}
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                        title="Cambiar imagen"
                      >
                        <Camera className="w-4 h-4" />
                      </button>
                    </div>
                    
                    {/* Zona de imagen con drag & drop */}
                    <div 
                      className={`mb-4 relative rounded-lg border-2 border-dashed transition-all duration-200 ${
                        dragOver ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
                      }`}
                      onDragOver={(e) => {
                        e.preventDefault();
                        setDragOver(true);
                      }}
                      onDragLeave={(e) => {
                        e.preventDefault();
                        setDragOver(false);
                      }}
                      onDrop={(e) => {
                        e.preventDefault();
                        setDragOver(false);
                        const files = e.dataTransfer.files;
                        if (files.length > 0) {
                          handleImageUploadDetalle(files[0]);
                        }
                      }}
                    >
                      <ImagenProducto codigo={productoSeleccionado.codigo} nombre={productoSeleccionado.nombre} />
                      
                      {/* Overlay para indicar drag & drop */}
                      {dragOver && (
                        <div className="absolute inset-0 bg-blue-100 bg-opacity-90 flex items-center justify-center rounded-lg">
                          <div className="text-center">
                            <Upload className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                            <p className="text-blue-600 font-medium">Suelta la imagen aquí</p>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Input oculto para subir imagen */}
                    <input
                      id="imagen-upload-detalle"
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                        const file = e.target.files[0];
                        if (file) {
                          handleImageUploadDetalle(file);
                        }
                      }}
                      className="hidden"
                    />
                    
                    <button 
                      onClick={() => document.getElementById('imagen-upload-detalle').click()}
                      className="w-full px-3 py-2 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center justify-center space-x-2"
                    >
                      <ImageIcon className="w-4 h-4" />
                      <span>Cambiar Imagen</span>
                    </button>
                  </div>

                  {/* Código de barras */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">Código de Barras</h3>
                      <button
                        onClick={() => imprimirEtiqueta(productoSeleccionado)}
                        className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                        title="Imprimir etiqueta"
                      >
                        <Printer className="w-4 h-4" />
                      </button>
                    </div>
                    <div className="bg-white p-3 rounded border mb-3">
                      <canvas 
                        id={`barcode-${productoSeleccionado.id}`}
                        className="w-full"
                        ref={async (canvas) => {
                          if (canvas && productoSeleccionado.codigo) {
                            try {
                              // ⚡ LAZY LOADING: Solo carga JsBarcode cuando se necesita
                              const JsBarcode = (await loadJsBarcode()).default;
                              JsBarcode(canvas, productoSeleccionado.codigo, {
                                format: "CODE128",
                                width: 2,
                                height: 60,
                                displayValue: true,
                                fontSize: 12,
                                textMargin: 5
                              });
                            } catch (e) {
                              console.error('Error generando código de barras:', e);
                            }
                          }
                        }}
                      />
                    </div>
                    <div className="text-center text-xs font-mono text-gray-600 mb-3">
                      {productoSeleccionado.codigo}
                    </div>
                    <button 
                      onClick={() => imprimirEtiqueta(productoSeleccionado)}
                      className="w-full px-3 py-2 text-sm bg-green-100 hover:bg-green-200 text-green-800 rounded-lg transition-colors flex items-center justify-center space-x-2"
                    >
                      <Printer className="w-4 h-4" />
                      <span>Imprimir Etiqueta</span>
                    </button>
                  </div>
                </div>

                {/* Columna central: Información básica */}
                <div className="space-y-6">
                  {/* Información principal */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-4">Información del Producto</h3>
                    <div className="space-y-3">
                      <div>
                        <h4 className="text-lg font-bold text-gray-900">{productoSeleccionado.nombre}</h4>
                        <div className="flex items-center space-x-2 mt-1">
                          <EstadoStock stock={productoSeleccionado.stock} />
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div>
                          <span className="font-medium text-gray-700">Categoría:</span>
                          <p className="text-gray-900">{productoSeleccionado.categoria}</p>
                        </div>
                        <div>
                          <span className="font-medium text-gray-700">Código:</span>
                          <p className="font-mono text-gray-900">{productoSeleccionado.codigo || 'Sin código'}</p>
                        </div>
                      </div>

                      {productoSeleccionado.descripcion && (
                        <div>
                          <span className="font-medium text-gray-700">Descripción:</span>
                          <p className="text-sm text-gray-900 mt-1">{productoSeleccionado.descripcion}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Análisis financiero */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-4 flex items-center space-x-2">
                      <DollarSign className="w-4 h-4" />
                      <span>Análisis Financiero</span>
                    </h3>
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-3">
                        <div className="bg-blue-50 p-3 rounded-lg">
                          <span className="text-xs font-medium text-blue-700">Precio de Costo</span>
                          <p className="text-lg font-bold text-blue-800">${productoSeleccionado.precio_costo?.toFixed(2) || '0.00'}</p>
                        </div>
                        <div className="bg-green-50 p-3 rounded-lg">
                          <span className="text-xs font-medium text-green-700">Precio de Venta</span>
                          <p className="text-lg font-bold text-green-800">${productoSeleccionado.precio_venta.toFixed(2)}</p>
                        </div>
                      </div>
                      
                      <div className="bg-emerald-50 p-3 rounded-lg">
                        <span className="text-xs font-medium text-emerald-700">Diferencia de Ganancia</span>
                        <div className="flex items-center space-x-2">
                          <p className="text-lg font-bold text-emerald-800">
                            {productoSeleccionado.precio_costo > 0 
                              ? (((productoSeleccionado.precio_venta - productoSeleccionado.precio_costo) / productoSeleccionado.precio_costo) * 100).toFixed(1)
                              : 0}%
                          </p>
                          <span className="text-xs text-emerald-600">
                            (+${(productoSeleccionado.precio_venta - (productoSeleccionado.precio_costo || 0)).toFixed(2)} por unidad)
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Columna derecha: Análisis y rotación */}
                <div className="space-y-6">
                  {/* Inventario y rotación */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-4 flex items-center space-x-2">
                      <BarChart3 className="w-4 h-4" />
                      <span>Análisis de Inventario</span>
                    </h3>
                    <div className="space-y-3">
                      <div className="bg-white p-3 rounded-lg border">
                        <span className="text-xs font-medium text-gray-700">Stock Actual</span>
                        <div className="flex items-center justify-between">
                          <p className="text-2xl font-bold text-gray-900">{productoSeleccionado.stock}</p>
                          <div className="text-right">
                            <p className="text-xs text-gray-600">Valor en inventario</p>
                            <p className="font-medium text-green-600">
                              ${(productoSeleccionado.stock * (productoSeleccionado.precio_costo || 0)).toFixed(2)}
                            </p>
                          </div>
                        </div>
                      </div>

                      <div className="bg-orange-50 p-3 rounded-lg">
                        <span className="text-xs font-medium text-orange-700">Rotación Estimada</span>
                        <div className="flex items-center space-x-2">
                          <RotateCcw className="w-4 h-4 text-orange-600" />
                          <p className="text-sm font-medium text-orange-800">
                            {datosVentas.cargando 
                              ? 'Calculando...' 
                              : datosVentas.rotacionEstimada > 0 
                                ? `${datosVentas.rotacionEstimada} unidades/mes`
                                : 'Sin rotación detectada'
                            }
                          </p>
                        </div>
                        <p className="text-xs text-orange-600 mt-1">Basado en ventas de últimos 30 días</p>
                      </div>

                      <div className="bg-purple-50 p-3 rounded-lg">
                        <span className="text-xs font-medium text-purple-700">Stock Mínimo Recomendado</span>
                        <p className="text-lg font-bold text-purple-800">
                          {Math.max(5, Math.floor(productoSeleccionado.stock * 0.2))} unidades
                        </p>
                        <p className="text-xs text-purple-600">Para evitar quiebre de stock</p>
                      </div>
                    </div>
                  </div>

                  {/* Análisis de ventas */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-4 flex items-center space-x-2">
                      <TrendingUp className="w-4 h-4" />
                      <span>Análisis de Ventas</span>
                      {datosVentas.cargando && (
                        <RefreshCw className="w-4 h-4 animate-spin text-blue-500" />
                      )}
                    </h3>
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div className="bg-white p-2 rounded border">
                          <span className="text-xs text-gray-600">Últimos 7 días</span>
                          <p className="font-medium">
                            {datosVentas.cargando ? 'Cargando...' : `${datosVentas.ventasUltimos7Dias} ventas`}
                          </p>
                        </div>
                        <div className="bg-white p-2 rounded border">
                          <span className="text-xs text-gray-600">Últimos 30 días</span>
                          <p className="font-medium">
                            {datosVentas.cargando ? 'Cargando...' : `${datosVentas.ventasUltimos30Dias} ventas`}
                          </p>
                        </div>
                        <div className="bg-white p-2 rounded border">
                          <span className="text-xs text-gray-600">Promedio mensual</span>
                          <p className="font-medium">
                            {datosVentas.cargando ? 'Cargando...' : `${datosVentas.promedioMensual} unidades`}
                          </p>
                        </div>
                        <div className="bg-white p-2 rounded border">
                          <span className="text-xs text-gray-600">Último movimiento</span>
                          <p className="font-medium text-xs">
                            {datosVentas.cargando 
                              ? 'Cargando...' 
                              : datosVentas.ultimoMovimiento 
                                ? new Date(datosVentas.ultimoMovimiento.fecha || Date.now()).toLocaleDateString()
                                : 'Sin registros'
                            }
                          </p>
                        </div>
                      </div>
                      
                      <div className="bg-yellow-50 p-3 rounded-lg">
                        <span className="text-xs font-medium text-yellow-700">Estado del Producto</span>
                        <p className="text-sm font-medium text-yellow-800">
                          {productoSeleccionado.stock === 0 ? 'Sin stock - Requiere reposición' :
                           productoSeleccionado.stock <= 5 ? 'Stock bajo - Considerar reposición' :
                           datosVentas.ventasUltimos30Dias > 0 ? 'Producto activo con ventas recientes' :
                           'Stock normal - Sin movimiento reciente'}
                        </p>
                      </div>
                      
                      {datosVentas.ventasUltimos30Dias > 0 && (
                        <div className="bg-blue-50 p-3 rounded-lg">
                          <span className="text-xs font-medium text-blue-700">Rotación Estimada</span>
                          <p className="text-sm font-medium text-blue-800">
                            {datosVentas.rotacionEstimada} unidades/mes
                          </p>
                          <p className="text-xs text-blue-600">Basado en ventas recientes</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
              <div className="flex space-x-3">
                <button
                  onClick={cerrarModales}
                  className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cerrar
                </button>
              </div>
              <div className="flex space-x-3">
                <button 
                  onClick={() => imprimirEtiqueta(productoSeleccionado)}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Printer className="w-4 h-4" />
                  <span>Imprimir Etiqueta</span>
                </button>
                <button 
                  onClick={() => {
                    cerrarModales();
                    abrirModalEditar(productoSeleccionado);
                  }}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Edit className="w-4 h-4" />
                  <span>Editar Producto</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Formulario Mejorado (Crear/Editar) */}
      {modalForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-5xl w-full max-h-[95vh] overflow-hidden">
            
            {/* Header del Modal */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Package className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">
                    {modoEdicion ? 'Editar Producto' : 'Nuevo Producto'}
                  </h2>
                  <p className="text-sm text-gray-600">
                    {modoEdicion ? 'Modifica la información del producto' : 'Completa los datos del nuevo producto'}
                  </p>
                </div>
              </div>
              <button
                onClick={cerrarModales}
                className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            {/* Tabs de navegación */}
            <div className="border-b border-gray-200 bg-gray-50">
              <div className="flex space-x-8 px-6">
                {[
                  { id: 'informacion', label: 'Información Básica', icon: '📝' },
                  { id: 'precios', label: 'Precios y Stock', icon: '💰' },
                  { id: 'imagen', label: 'Imagen', icon: '🖼️' },
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setTabActiva(tab.id)}
                    className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                      tabActiva === tab.id
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <span>{tab.icon}</span>
                    <span>{tab.label}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Contenido del modal con scroll */}
            <div className="overflow-y-auto max-h-[60vh]">
              <div className="p-6">
                
                {/* Tab: Información Básica */}
                {tabActiva === 'informacion' && (
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      
                      {/* Nombre */}
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Nombre del Producto *
                        </label>
                        <input
                          type="text"
                          name="nombre"
                          value={formData.nombre}
                          onChange={handleInputChange}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                          placeholder="Ej: Coca Cola 500ml"
                          required
                        />
                      </div>

                      {/* Categoría */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Categoría
                        </label>
                        <select
                          name="categoria"
                          value={formData.categoria}
                          onChange={handleInputChange}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        >
                          <option value="">Seleccionar categoría</option>
                          <option value="Bebidas">Bebidas</option>
                          <option value="Snacks">Snacks</option>
                          <option value="Golosinas">Golosinas</option>
                          <option value="Lácteos">Lácteos</option>
                          <option value="Almacén">Almacén</option>
                          <option value="Kiosco">Kiosco</option>
                          <option value="Panadería">Panadería</option>
                          <option value="Limpieza">Limpieza</option>
                          <option value="Otros">Otros</option>
                        </select>
                      </div>

                      {/* Código */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Código/SKU
                        </label>
                        <input
                          type="text"
                          name="codigo"
                          value={formData.codigo}
                          onChange={handleInputChange}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                          placeholder="Ej: 7790123456789"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          Código de barras o SKU único del producto
                        </p>
                      </div>
                    </div>

                    {/* Descripción */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Descripción
                      </label>
                      <textarea
                        name="descripcion"
                        value={formData.descripcion}
                        onChange={handleInputChange}
                        rows={4}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="Descripción detallada del producto (opcional)"
                      />
                    </div>

                    {/* Toggle para Descuentos por Forma de Pago */}
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 p-4 rounded-lg border border-green-200">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-800 mb-1">
                            💳 Elegible para Descuentos por Forma de Pago
                          </label>
                          <p className="text-xs text-gray-600">
                            Si está activado, este producto será incluido en los descuentos por forma de pago (efectivo, transferencia, etc.)
                          </p>
                        </div>
                        <div className="ml-4">
                          <button
                            type="button"
                            onClick={() => setFormData(prev => ({
                              ...prev,
                              aplica_descuento_forma_pago: !prev.aplica_descuento_forma_pago
                            }))}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                              formData.aplica_descuento_forma_pago
                                ? 'bg-green-600'
                                : 'bg-gray-200'
                            }`}
                          >
                            <span
                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                formData.aplica_descuento_forma_pago ? 'translate-x-6' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </div>
                      </div>
                      <div className="mt-2">
                        <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                          formData.aplica_descuento_forma_pago
                            ? 'bg-green-100 text-green-800'
                            : 'bg-gray-100 text-gray-600'
                        }`}>
                          {formData.aplica_descuento_forma_pago ? '✅ Incluido en descuentos' : '❌ Exento de descuentos'}
                        </span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Tab: Precios y Stock */}
                {tabActiva === 'precios' && (
                  <div className="space-y-6">
                    
                    {/* Sección de Costos */}
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <h3 className="text-lg font-semibold text-blue-900 mb-4 flex items-center">
                        <DollarSign className="w-5 h-5 mr-2" />
                        Gestión de Precios
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Precio de Costo */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Precio de Costo
                          </label>
                          <div className="relative">
                            <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                            <input
                              type="number"
                              name="precio_costo"
                              value={formData.precio_costo}
                              onChange={handleInputChange}
                              step="0.01"
                              min="0"
                              className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="0.00"
                            />
                          </div>
                        </div>

                        {/* Precio de Venta */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Precio de Venta *
                          </label>
                          <div className="relative">
                            <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                            <input
                              type="number"
                              name="precio_venta"
                              value={formData.precio_venta}
                              onChange={handleInputChange}
                              step="0.01"
                              min="0.01"
                              className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              placeholder="0.00"
                              required
                            />
                          </div>
                        </div>
                      </div>

                      {/* Calculadora de precios */}
                      <div className="mt-6 p-4 bg-white rounded-lg border border-blue-200">
                        <p className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                          <Calculator className="w-4 h-4 mr-2" />
                          Calcular precio automáticamente
                        </p>
                        
                        {/* Botones de porcentajes preestablecidos */}
                        <div className="flex flex-wrap gap-2 mb-4">
                          {[20, 30, 40, 50].map((porcentaje) => (
                            <button
                              key={porcentaje}
                              type="button"
                              onClick={() => calcularPrecioConPorcentaje(porcentaje)}
                              className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm font-medium border border-blue-200"
                              title={`Agregar ${porcentaje}% al precio de costo`}
                            >
                              +{porcentaje}%
                            </button>
                          ))}
                        </div>
                        
                        {/* Porcentaje personalizado */}
                        <div className="flex items-center space-x-3">
                          <label className="text-sm text-gray-600 whitespace-nowrap font-medium">Personalizado:</label>
                          <div className="flex items-center space-x-2 flex-1">
                            <input
                              type="number"
                              value={porcentajePersonalizado}
                              onChange={(e) => setPorcentajePersonalizado(e.target.value)}
                              placeholder="25"
                              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              min="0"
                              step="0.1"
                            />
                            <span className="text-sm text-gray-600 font-medium">%</span>
                            <button
                              type="button"
                              onClick={aplicarPorcentajePersonalizado}
                              className="px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors text-sm font-medium border border-green-200"
                            >
                              Aplicar
                            </button>
                          </div>
                        </div>
                        
                        {/* Mostrar cálculo */}
                        {precioCalculado && (
                          <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                            <p className="text-sm text-green-700 flex items-center">
                              <CheckCircle className="w-4 h-4 mr-2" />
                              <span className="font-medium">Cálculo aplicado:</span>
                              <span className="ml-2">{precioCalculado}</span>
                            </p>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Sección de Stock */}
                    <div className="bg-orange-50 p-4 rounded-lg">
                      <h3 className="text-lg font-semibold text-orange-900 mb-4 flex items-center">
                        <Package className="w-5 h-5 mr-2" />
                        Control de Inventario
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Stock Inicial */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Stock Inicial
                          </label>
                          <input
                            type="number"
                            name="stock"
                            value={formData.stock}
                            onChange={handleInputChange}
                            min="0"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                            placeholder="0"
                          />
                          <p className="text-xs text-gray-500 mt-1">
                            Cantidad inicial en inventario
                          </p>
                        </div>

                        {/* Stock Mínimo */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Stock Mínimo
                          </label>
                          <input
                            type="number"
                            name="stock_minimo"
                            value={formData.stock_minimo}
                            onChange={handleInputChange}
                            min="1"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                            placeholder="10"
                          />
                          <p className="text-xs text-gray-500 mt-1">
                            Alerta cuando el stock esté por debajo
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Tab: Imagen */}
                {tabActiva === 'imagen' && (
                  <div className="space-y-6">
                    <div className="text-center">
                      <h3 className="text-lg font-semibold text-gray-900 mb-2 flex items-center justify-center">
                        <ImageIcon className="w-5 h-5 mr-2" />
                        Imagen del Producto
                      </h3>
                      <p className="text-gray-600">
                        Sube una imagen para mostrar el producto en el catálogo
                      </p>
                    </div>

                    {/* Area de subida de imagen */}
                    <div
                      className={`border-2 border-dashed rounded-xl p-8 text-center transition-colors ${
                        dragOver
                          ? 'border-blue-400 bg-blue-50'
                          : 'border-gray-300 hover:border-gray-400'
                      }`}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      {imagenPreview ? (
                        <div className="space-y-4">
                          <div className="relative inline-block">
                            <img
                              src={imagenPreview}
                              alt="Preview"
                              className="w-48 h-48 object-cover rounded-lg border border-gray-200 shadow-md"
                            />
                            <button
                              type="button"
                              onClick={removerImagen}
                              className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                          <div className="space-y-2">
                            <p className="text-sm font-medium text-green-600">
                              ✓ Imagen cargada correctamente
                            </p>
                            <button
                              type="button"
                              onClick={() => document.getElementById('file-input').click()}
                              className="text-sm text-blue-600 hover:text-blue-800 underline"
                            >
                              Cambiar imagen
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                            <ImageIcon className="w-8 h-8 text-gray-400" />
                          </div>
                          <div>
                            <p className="text-lg font-medium text-gray-900">
                              Arrastra y suelta una imagen aquí
                            </p>
                            <p className="text-gray-500">o</p>
                            <button
                              type="button"
                              onClick={() => document.getElementById('file-input').click()}
                              className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                            >
                              Seleccionar archivo
                            </button>
                          </div>
                          <p className="text-xs text-gray-500">
                            Formatos soportados: JPG, PNG, GIF. Tamaño máximo: 5MB
                          </p>
                        </div>
                      )}

                      <input
                        id="file-input"
                        type="file"
                        accept="image/*"
                        onChange={handleFileInputChange}
                        className="hidden"
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Footer con botones */}
            <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
              <div className="flex items-center space-x-4">
                <div className="text-xs text-gray-500">
                  * Campos obligatorios
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <button
                  onClick={cerrarModales}
                  className="px-6 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={guardarProducto}
                  className="flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Save className="w-4 h-4" />
                  <span>{modoEdicion ? 'Actualizar' : 'Crear'} Producto</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Importación */}
      {modalImport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h2 className="text-xl font-semibold text-gray-900">Importar Productos desde Excel</h2>
            <button
                onClick={cerrarModales}
                className="text-gray-400 hover:text-gray-600"
            >
                <X className="w-6 h-6" />
            </button>
          </div>

    <div className="p-6">
              {!resultadoImport ? (
                <>
                  <div className="mb-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-3">Instrucciones:</h3>
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <ol className="list-decimal list-inside space-y-2 text-sm text-blue-800">
                        <li><strong>Descarga la plantilla</strong> haciendo clic en "Descargar Plantilla"</li>
                        <li><strong>Completa los datos</strong> de tus productos en Excel (mínimo: Nombre)</li>
                        <li><strong>Guarda como CSV</strong>: Archivo → Guardar como → CSV (UTF-8)</li>
                        <li><strong>Sube el archivo</strong> CSV aquí</li>
                      </ol>
                                             <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded">
                         <p className="text-xs text-yellow-800">
                           <strong>💡 Tips:</strong> El sistema detecta automáticamente las columnas aunque estén en diferente orden. 
                           Funciona con separadores por comas (,) o punto y coma (;). Los precios pueden estar vacíos para completar después.
                         </p>
                       </div>
                       <div className="mt-2 p-2 bg-blue-50 border border-blue-200 rounded">
                         <p className="text-xs text-blue-800">
                           <strong>🏷️ Códigos flexibles:</strong> Los códigos pueden repetirse, estar vacíos, o ser genéricos ("0", "1", etc.). 
                           Perfecto para productos artesanales o sin código de barras.
                         </p>
                       </div>
                       <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded">
                         <p className="text-xs text-green-800">
                           <strong>✅ Sin límites:</strong> Importa cualquier archivo - el sistema acepta múltiples productos 
                           con el mismo código, productos sin código, y códigos genéricos.
                         </p>
                       </div>
        </div>
          </div>
        
                  <div className="mb-6">
            <button 
                      onClick={descargarPlantilla}
                      className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
                      <FileSpreadsheet className="w-4 h-4" />
                      <span>Descargar Plantilla</span>
            </button>
      </div>
      
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Seleccionar archivo CSV
                    </label>
            <input
              type="file"
                      accept=".csv"
              onChange={handleFileSelect}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                    {archivoImport && (
                      <p className="mt-2 text-sm text-green-600">Archivo seleccionado: {archivoImport.name}</p>
                    )}
          </div>
                </>
              ) : (
                <div className="text-center">
                  <div className="mb-6">
                    {resultadoImport.errores.length === 0 ? (
                      <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                    ) : (
                      <AlertCircle className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
                    )}
                    <h3 className="text-lg font-medium text-gray-900 mb-2">Importación Completada</h3>
                    <div className="space-y-2 text-sm">
                      <p className="text-green-600">✅ Productos importados exitosamente: {resultadoImport.exitosos}</p>
                      
                      {resultadoImport.omitidos > 0 && (
                        <p className="text-yellow-600">⚠️ Productos duplicados omitidos: {resultadoImport.omitidos}</p>
                      )}
                      
                      {resultadoImport.erroresReales > 0 && (
                        <p className="text-red-600">❌ Errores reales: {resultadoImport.erroresReales}</p>
                      )}
                      
                      {resultadoImport.errores.length > 0 && (
                        <div>
                          <p className="text-gray-600 font-medium mt-3">Detalles:</p>
                          <div className="mt-2 max-h-40 overflow-y-auto bg-gray-50 border border-gray-200 rounded p-2">
                            {resultadoImport.errores.map((error, index) => {
                              const esInfo = error.startsWith('ℹ️');
                              const esDuplicado = error.includes('duplicado') || error.includes('omitido');
                              const colorClass = esInfo ? 'text-blue-700' : 
                                                esDuplicado ? 'text-yellow-700' : 'text-red-700';
                              
                              return (
                                <p key={index} className={`text-xs ${colorClass} mb-1`}>{error}</p>
                              );
                            })}
        </div>
      </div>
                      )}
        </div>
                  </div>
                </div>
              )}
          </div>
          
            <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
              <button 
                onClick={cerrarModales}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                {resultadoImport ? 'Cerrar' : 'Cancelar'}
              </button>
              {!resultadoImport && (
              <button 
                  onClick={procesarImportacion}
                  disabled={!archivoImport || procesandoImport}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {procesandoImport ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <Upload className="w-4 h-4" />
                  )}
                  <span>{procesandoImport ? 'Procesando...' : 'Importar Productos'}</span>
          </button>
              )}
        </div>
      </div>
        </div>
      )}
    </div>
  );
};

export default ProductosPage; 